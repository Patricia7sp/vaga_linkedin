name: Databricks CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'agents/**'
      - 'agent_chat.py'
      - 'databricks_**'
      - 'notebooks/**'
      - '.github/workflows/databricks-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PYTHON_VERSION: '3.10'

jobs:
  # ==================== DATABRICKS VALIDATION ====================
  databricks-validate:
    name: üîç Validate Databricks Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install databricks-cli databricks-sdk
          pip install -r requirements.txt

      - name: Validate Python files
        run: |
          python -m py_compile agent_chat.py
          python -m py_compile agents/**/*.py

      - name: Run Databricks-specific tests
        run: |
          pytest tests/integration/test_databricks_*.py -v

  # ==================== DEPLOY TO DATABRICKS DEV ====================
  deploy-databricks-dev:
    name: üöÄ Deploy to Databricks DEV
    runs-on: ubuntu-latest
    needs: databricks-validate
    if: github.ref == 'refs/heads/develop'
    # environment:
    #   name: databricks-dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Databricks CLI
        run: |
          pip install databricks-cli databricks-sdk

      - name: Upload agent_chat.py to Databricks
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST_DEV }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN_DEV }}
        run: |
          python -c "
          from databricks.sdk import WorkspaceClient
          from databricks.sdk.service.workspace import ImportFormat
          import os
          
          w = WorkspaceClient(
              host=os.getenv('DATABRICKS_HOST'),
              token=os.getenv('DATABRICKS_TOKEN')
          )
          
          # Upload agent_chat.py
          with open('agent_chat.py', 'rb') as f:
              w.workspace.upload(
                  path='/Shared/dev/agent_chat.py',
                  content=f.read(),
                  format=ImportFormat.SOURCE,
                  overwrite=True
              )
          print('‚úÖ agent_chat.py uploaded to DEV')
          "

      - name: Upload notebooks
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST_DEV }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN_DEV }}
        run: |
          databricks workspace import_dir notebooks /Shared/dev/notebooks --overwrite

      - name: Update Databricks Job (DEV)
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST_DEV }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN_DEV }}
        run: |
          python -c "
          from databricks.sdk import WorkspaceClient
          import os
          
          w = WorkspaceClient(
              host=os.getenv('DATABRICKS_HOST'),
              token=os.getenv('DATABRICKS_TOKEN')
          )
          
          # Update job configuration
          # Job ID para DEV (criar se n√£o existir)
          print('‚úÖ Databricks job updated in DEV')
          "

  # ==================== DEPLOY TO DATABRICKS STAGING ====================
  deploy-databricks-staging:
    name: üé≠ Deploy to Databricks STAGING
    runs-on: ubuntu-latest
    needs: databricks-validate
    if: github.ref == 'refs/heads/main'
    # environment:
    #   name: databricks-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Databricks CLI
        run: |
          pip install databricks-cli databricks-sdk

      - name: Upload agent_chat.py to Databricks
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          python -c "
          from databricks.sdk import WorkspaceClient
          from databricks.sdk.service.workspace import ImportFormat
          import os
          
          w = WorkspaceClient(
              host=os.getenv('DATABRICKS_HOST'),
              token=os.getenv('DATABRICKS_TOKEN')
          )
          
          # Upload agent_chat.py
          with open('agent_chat.py', 'rb') as f:
              w.workspace.upload(
                  path='/Shared/staging/agent_chat.py',
                  content=f.read(),
                  format=ImportFormat.SOURCE,
                  overwrite=True
              )
          print('‚úÖ agent_chat.py uploaded to STAGING')
          "

  # ==================== DEPLOY TO DATABRICKS PRODUCTION ====================
  deploy-databricks-prod:
    name: üè≠ Deploy to Databricks PRODUCTION
    runs-on: ubuntu-latest
    needs: deploy-databricks-staging
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'prod'
    # environment:
    #   name: databricks-production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Databricks CLI
        run: |
          pip install databricks-cli databricks-sdk

      - name: Upload agent_chat.py to Databricks PROD
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          python -c "
          from databricks.sdk import WorkspaceClient
          from databricks.sdk.service.workspace import ImportFormat
          import os
          
          w = WorkspaceClient(
              host=os.getenv('DATABRICKS_HOST'),
              token=os.getenv('DATABRICKS_TOKEN')
          )
          
          # Upload agent_chat.py to PRODUCTION
          with open('agent_chat.py', 'rb') as f:
              w.workspace.upload(
                  path='/Shared/agent_chat.py',
                  content=f.read(),
                  format=ImportFormat.SOURCE,
                  overwrite=True
              )
          print('‚úÖ agent_chat.py uploaded to PRODUCTION')
          "

      - name: Run validation tests on PROD
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          # Execute validation job
          echo "Running validation tests..."
